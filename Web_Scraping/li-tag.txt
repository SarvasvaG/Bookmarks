It is a decision problem , meaning that for any input to the problem, the output is either "yes" or "no".
When the answer is "yes", this can be demonstrated through the existence of a short (polynomial length) solution .
The correctness of each solution can be verified quickly (namely, in polynomial time ) and a brute-force search algorithm can find a solution by trying all possible solutions.
The problem can be used to simulate every other problem for which we can verify quickly that a solution is correct. In this sense, NP-complete problems are the hardest of the problems to which solutions can be verified quickly. If we could find solutions of some NP-complete problem quickly, we could quickly find the solutions of every other problem to which a given solution can be easily verified.
C {\displaystyle \scriptstyle C} is in NP, and
Every problem in NP is reducible to C {\displaystyle \scriptstyle C} in polynomial time. [3]
Boolean satisfiability problem (SAT)
Knapsack problem
Hamiltonian path problem
Travelling salesman problem (decision version)
Subgraph isomorphism problem
Subset sum problem
Clique problem
Vertex cover problem
Independent set problem
Dominating set problem
Graph coloring problem
Graph Isomorphism: Is graph G 1 isomorphic to graph G 2 ?
Subgraph Isomorphism: Is graph G 1 isomorphic to a subgraph of graph G 2 ?
Approximation : Instead of searching for an optimal solution, search for a solution that is at most a factor from an optimal one.
Randomization : Use randomness to get a faster average running time , and allow the algorithm to fail with some small probability. Note: The Monte Carlo method is not an example of an efficient algorithm in this specific sense, although evolutionary approaches like Genetic algorithms may be.
Restriction: By restricting the structure of the input (e.g., to planar graphs), faster algorithms are usually possible.
Parameterization : Often there are fast algorithms if certain parameters of the input are fixed.
Heuristic : An algorithm that works "reasonably well" in many cases, but for which there is no proof that it is both always fast and always produces a good result. Metaheuristic approaches are often used.
"NP-complete problems are the most difficult known problems." Since NP-complete problems are in NP, their running time is at most exponential. However, some problems have been proven to require more time, for example Presburger arithmetic . Of some problems, it has even been proven that they can never be solved at all, for example the halting problem .
"NP-complete problems are difficult because there are so many different solutions." On the one hand, there are many problems that have a solution space just as large, but can be solved in polynomial time (for example minimum spanning tree ). On the other hand, there are NP-problems with at most one solution that are NP-hard under randomized polynomial-time reduction (see Valiant–Vazirani theorem ).
"Solving NP-complete problems requires exponential time." First, this would imply P ≠ NP, which is still an unsolved question. Further, some NP-complete problems actually have algorithms running in superpolynomial, but subexponential time such as O(2 √ n n ). For example, the independent set and dominating set problems for planar graphs are NP-complete, but can be solved in subexponential time using the planar separator theorem . [13]
"Each instance of an NP-complete problem is difficult." Often some instances, or even most instances, may be easy to solve within polynomial time. However, unless P=NP, any polynomial-time algorithm must asymptotically be wrong on more than polynomially many of the exponentially many inputs of a certain size. [14]
"If P=NP, all cryptographic ciphers can be broken." A polynomial-time problem can be very difficult to solve in practice if the polynomial's degree or constants are large enough. In addition, information-theoretic security provides cryptographic methods that cannot be broken even with unlimited computing power.
"A large-scale quantum computer would be able to efficiently solve NP-complete problems." The class of decision problems that can be efficiently solved (in principle) by a fault-tolerant quantum computer is known as BQP. However, BQP is not believed to contain all of NP, and if it does not, then it cannot contain any NP-complete problem. [15]
union
intersection
concatenation
Kleene star [ example  needed ]
Almost complete
Gadget (computer science)
Ladner's theorem
List of NP-complete problems
NP-hard
P = NP problem
Strongly NP-complete
Travelling Salesman (2012 film)
^ For example, simply assigning true to each variable renders the 18th conjunct m ¯ ∨ r ¯ ∨ s ¯ {\displaystyle {\overline {m}}\lor {\overline {r}}\lor {\overline {s}}} (and hence the complete formula) false .
^ Cobham, Alan (1965). "The intrinsic computational difficulty of functions". Proc. Logic, Methodology, and Philosophy of Science II . North Holland.
^ J. van Leeuwen (1998). Handbook of Theoretical Computer Science . Elsevier. p. 84. ISBN 978-0-262-72014-4 .
^ J. van Leeuwen (1998). Handbook of Theoretical Computer Science . Elsevier. p. 80. ISBN 978-0-262-72014-4 .
^ Kiersz, Andy. "An eminent mathematician claims to have solved one of math's greatest mysteries — and it's one of 6 problems with a $1 million prize" . Business Insider . Retrieved 2023-04-24 .
^ Chen, Jianer; Kanj, Iyad A.; Xia, Ge (2010-09-06). "Improved upper bounds for vertex cover" . Theoretical Computer Science . 411 (40): 3736–3756. doi : 10.1016/j.tcs.2010.06.026 . ISSN 0304-3975 .
^ Agrawal, M. ; Allender, E.; Rudich, Steven (1998). "Reductions in Circuit Complexity: An Isomorphism Theorem and a Gap Theorem" . Journal of Computer and System Sciences . 57 (2): 127–143. doi : 10.1006/jcss.1998.1583 . ISSN 1090-2724 .
^ Agrawal, M. ; Allender, E.; Impagliazzo, R.; Pitassi, T. ; Rudich, Steven (2001). "Reducing the complexity of reductions". Computational Complexity . 10 (2): 117–138. doi : 10.1007/s00037-001-8191-1 . ISSN 1016-3328 . S2CID 29017219 .
^ Don Knuth , Tracy Larrabee, and Paul M. Roberts, Mathematical Writing Archived 2010-08-27 at the Wayback Machine § 25, MAA Notes No. 14 , MAA, 1989 (also Stanford Technical Report, 1987).
^ Knuth, D. F. (1974). "A terminological proposal". SIGACT News . 6 (1): 12–18. doi : 10.1145/1811129.1811130 . S2CID 45313676 .
^ See the poll, or [1] Archived 2011-06-07 at the Wayback Machine .
^ Ball, Philip (2000). "DNA computer helps travelling salesman" . Nature . doi : 10.1038/news000113-10 .
^ Bern (1990) ; Deĭneko, Klinz & Woeginger (2006) ; Dorn et al. (2005) harvtxt error: no target: CITEREFDornPenninksBodlaenderFomin2005 ( help ) ; Lipton & Tarjan (1980) .
^ Hemaspaandra, L. A.; Williams, R. (2012). "SIGACT News Complexity Theory Column 76". ACM SIGACT News . 43 (4): 70. doi : 10.1145/2421119.2421135 . S2CID 13367514 .
^ Aaronson, Scott (2010). "BQP and the polynomial hierarchy". In Schulman, Leonard J. (ed.). Proceedings of the 42nd ACM Symposium on Theory of Computing, STOC 2010, Cambridge, Massachusetts, USA, 5–8 June 2010 . Association for Computing Machinery. pp. 141–150. arXiv : 0910.4698 . doi : 10.1145/1806689.1806711 . ISBN 978-1-4503-0050-6 .
^ Talbot, John; Welsh, D. J. A. (2006), Complexity and Cryptography: An Introduction , Cambridge University Press, p. 57, ISBN 9780521617710 , The question of whether NP and co-NP are equal is probably the second most important open problem in complexity theory, after the P versus NP question.
Garey, Michael R. ; Johnson, David S. (1979). Computers and Intractability: A Guide to the Theory of NP-Completeness . Series of Books in the Mathematical Sciences (1st ed.). New York: W. H. Freeman and Company . ISBN 9780716710455 . MR 0519066 . OCLC 247570676 . This book is a classic, developing the theory, then cataloguing many NP-Complete problems.
Cook, S.A. (1971). "The complexity of theorem proving procedures". Proceedings, Third Annual ACM Symposium on the Theory of Computing, ACM, New York . pp. 151–158. doi : 10.1145/800157.805047 .
Dunne, P.E. "An annotated list of selected NP-complete problems" . COMP202, Dept. of Computer Science, University of Liverpool . Retrieved 2008-06-21 .
Crescenzi, P.; Kann, V.; Halldórsson, M.; Karpinski, M. ; Woeginger, G . "A compendium of NP optimization problems" . KTH, Stockholm . Retrieved 2020-10-24 .
Dahlke, K. "NP-complete problems" . Math Reference Project . Retrieved 2008-06-21 .
Karlsson, R. "Lecture 8: NP-complete problems" (PDF) . Dept. of Computer Science, Lund University, Sweden. Archived from the original (PDF) on April 19, 2009 . Retrieved 2008-06-21 .
Sun, H.M. "The theory of NP-completeness" . Information Security Laboratory, Dept. of Computer Science, National Tsing Hua University , Hsinchu City, Taiwan. Archived from the original (PPT) on 2009-09-02 . Retrieved 2008-06-21 .
Jiang, J.R. "The theory of NP-completeness" (PPT) . Dept. of Computer Science and Information Engineering, National Central University , Jhongli City, Taiwan . Retrieved 2008-06-21 .
Cormen, T.H. ; Leiserson, C.E. ; Rivest, R.L. ; Stein, C. (2001). "Chapter 34: NP–Completeness". Introduction to Algorithms (2nd ed.). MIT Press and McGraw-Hill. pp. 966–1021. ISBN 978-0-262-03293-3 .
Sipser, M. (1997). "Sections 7.4–7.5 (NP-completeness, Additional NP-complete Problems)" . Introduction to the Theory of Computation . PWS Publishing. pp. 248–271 . ISBN 978-0-534-94728-6 .
Papadimitriou, C. (1994). "Chapter 9 (NP-complete problems)". Computational Complexity (1st ed.). Addison Wesley. pp. 181–218. ISBN 978-0-201-53082-7 .
Computational Complexity of Games and Puzzles
Tetris is Hard, Even to Approximate
Minesweeper is NP-complete!
Bern, Marshall (1990). "Faster exact algorithms for Steiner trees in planar networks". Networks . 20 (1): 109–120. doi : 10.1002/net.3230200110 . .
Deĭneko, Vladimir G.; Klinz, Bettina; Woeginger, Gerhard J. (2006). "Exact algorithms for the Hamiltonian cycle problem in planar graphs". Operations Research Letters . 34 (3): 269–274. doi : 10.1016/j.orl.2005.04.013 . .
Dorn, Frederic; Penninkx, Eelko; Bodlaender, Hans L. ; Fomin, Fedor V. (2005). "Efficient Exact Algorithms on Planar Graphs: Exploiting Sphere Cut Branch Decompositions". Proc. 13th European Symposium on Algorithms (ESA '05) . Lecture Notes in Computer Science. Vol. 3669. Springer-Verlag. pp. 95–106. doi : 10.1007/11561071_11 . ISBN 978-3-540-29118-3 . .
Lipton, Richard J. ; Tarjan, Robert E. (1980). "Applications of a planar separator theorem". SIAM Journal on Computing . 9 (3): 615–627. doi : 10.1137/0209046 . S2CID 12961628 . .
Scott Aaronson , NP-complete Problems and Physical Reality , ACM SIGACT News, Vol. 36, No. 1. (March 2005), pp. 30–52.
Lance Fortnow , The status of the P versus NP problem , Commun. ACM , Vol. 52, No. 9. (2009), pp. 78–86.
v
t
e
DLOGTIME
AC 0
ACC 0
TC 0
L
SL
RL
NL NL-complete
NL-complete
NC
SC
CC
P P-complete
P-complete
ZPP
RP
BPP
BQP
APX
FP
UP
NP NP-complete NP-hard co-NP co-NP-complete
NP-complete
NP-hard
co-NP
co-NP-complete
AM
QMA
PH
⊕P
PP
#P #P-complete
#P-complete
IP
PSPACE PSPACE-complete
PSPACE-complete
EXPTIME
NEXPTIME
EXPSPACE
2-EXPTIME
ELEMENTARY
PR
R
RE
ALL
Polynomial hierarchy
Exponential hierarchy
Grzegorczyk hierarchy
Arithmetical hierarchy
Boolean hierarchy
DTIME
NTIME
DSPACE
NSPACE
Probabilistically checkable proof
Interactive proof system
1971 in computing
NP-complete problems
Complexity classes
Mathematical optimization
Webarchive template wayback links
Harv and Sfn no-target errors
Articles with short description
Short description matches Wikidata
Wikipedia articles needing clarification from July 2012
All Wikipedia articles needing clarification
All articles with unsourced statements
Articles with unsourced statements from October 2022
All articles needing examples
Articles needing examples from April 2023
Toggle limited content width
